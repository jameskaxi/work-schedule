1. SWI
2. cache
3. multicore frame
4. SECTION define


//----------------------------------------------------------------------------------------------------
						SWI
//----------------------------------------------------------------------------------------------------
Uint key;
key=Swi_disable();//关闭所有的swi
Swi_inc(swi0);//inc表示加1，然后加入线程队列中（post），但是还不能马上执行，因为swi还是disable状态
Swi_inc(swi0);//再加1也没用 ，已经在队列中了，可是处于disable状态
Swi_restore(key);//此时可以执行了

Swi_dec(swi1);//要减1，为0才post

//----------------------------------------------------------------------------------------------------
						FAQ
//----------------------------------------------------------------------------------------------------
1. 将MCSDK相关例程导入后编译不通过，可能都有哪些原因导致?
答：工程编译出错的原因很多，下面列出两点通用的原因，具体问题还得具体分析：
a）由于工程中可能使用绝对路径，所以工程更换路径后需要作出相应修改，可以通过
project->properties->CCS Build->C6000 Compiler->include options下面的include search path
确认是否符合当前工程的头文件所在路径；如果在工程中包含lib，
则需要同时确认修改C6000 linker->file search path中的library search path；
b) 工程中可能使用link的方式加入源文件，所以在工程路径变更后，源文件路径可能变化，
此时需要将link的源文件从工程中删除，然后将文件拖到工程中选择link即可。

2. 在进行程序性能测试时, 发现运行cycle很长，可能的原因有哪些?
答：a) 在工程中加入正确的PLL及DDR初始化配置，可以加入gel文件，也可在源文件中加入相应初始化代码；
b) 使能cache配置，包括配置L1/L2 cache，数据存放的memory通过配置MAR寄存器使能cache；
c) 尽可能将常用的大块数据放在LL2，降低数据读写时延；
d) 修改optimization level为-o3。
关于各函数的性能分析可以使用如下链接的工具，对于关键的算法代码可以参考C6000优化手册。
C6000 function profile tool：http://www.deyisupport.com/question_answer/dsp_arm/c6000_multicore/f/53/t/25048.aspx
C6000优化入门指南：http://www.deyisupport.com/question_answer/dsp_arm/c6000_multicore/f/53/t/19044.aspx

3. 使用MCSDK中的IPC进行核间通信测试时, 发现核间通信时间很长，该如何解决, TI推荐的核间通信方式有哪些?
答：a) 首先确认时延测试方法的正确性，需要确认记录时间点基准一致，如在保证发送和接收core同步的基础上，记录发送和接收时间点；
b) 核间通信的方法有很多，如shared memory、semaphore、IPC register、QMSS等，前三种方法相对简单，但是各有限制，相对来说QMSS灵活性更高，容错性更高，所以QMSS是Keystone中推荐的一种常用核间通信的方式。

4. TI EVM都有IBL，这个IBL的作用是什么, 是否所有的Keystone板子设计都需要EEPROM，并且在上面烧写IBL呢?
 答：EVM上存在IBL主要有两个作用：a）解决C667x PG1.0芯片中PLL unlock的问题，具体可参考Errata Advisory8，即首先进入IBL对PLL进行重配并lock，之后再跳转到二级boot；b）支持Norflash、Nandflash及Ethernet二级boot。在设计板子时，如果不需要二级boot，则EEPROM及IBL不是必须的；考虑到C667x PG1.0 PLL Unlock的问题，建议在设计时带上EEPROM。

5. Keystone 对CVDD的参考电压设计都要求smartreflex，如果对功耗要求没有那么严格，是否可以使用固定电压供电呢?
答：从芯片的功耗、寿命及稳定性考虑，推荐使用smartreflex。如果使用固定电压供电，当电压低于smart reflex 要求的电压，芯片不一定能正常工作。 当电压高于CVDD额定电压，不仅芯片的功耗可能会急剧上升，也不排除芯片可能出现不可预知的问题。关于smartreflex推荐参考方案，一种是如EVM使用UCD，还有一种是使用LM10011+TPS的方案：http://www.ti.com/tool/pmp7256。

6. 对于多核编程，每个核可以运行不同的程序，如果多核运行同一个程序，对于不同的核该如何区分代码和私有变量呢?
答：多核编程时，对于代码段可以将共享代码放在共享memory，代码中通过DNUM区分核；对于数据段，堆栈必须每个核私有，全局私有变量，可以通过MPAX单元配置达到各核看到相同的逻辑地址但是对应不同的私有物理地址。具体可以参考multicore program guide：http://www.ti.com/lit/an/sprab27b/sprab27b.pdf。

//----------------------------------------------------------------------------------------------------
						
//----------------------------------------------------------------------------------------------------
银河白    #FFFFFF   RGB(255, 255, 255)
杏仁黄    #FAF9DE   RGB(250, 249, 222)
秋叶褐    #FFF2E2   RGB(255, 242, 226)
胭脂红    #FDE6E0   RGB(253, 230, 224)
青草绿    #E3EDCD   RGB(227, 237, 205)
海天蓝    #DCE2F1   RGB(220, 226, 241)
葛巾紫    #E9EBFE   RGB(233, 235, 254)
极光灰    #EAEAEF   RGB(234, 234, 239)

//----------------------------------------------------------------------------------------------------
						多核
//----------------------------------------------------------------------------------------------------
是否涉及到多核是根据用户来设定的，IPC只是提供多核之间的中断问题。
从你的算法角度来说，可以使用IPC，也可以不使用IPC。
比如你固定将 0-7 的循环分配给核0，结果写到 a[0]-a[7]，将 8-15 的循环分配给核1，结果写到 a[8]-a[15]。这种方法核之间并没有冲突，因此不需要使用IPC进行核间通信。
而如果你想做动态分配任务到多核，这种往往涉及到操作系统OS，比较复杂。简单的方法是同一份代码，不同的核处理不同的分支，依据宏DNUM来区分核。


C6678的8个核能否同一时刻去访问共享存储器？是否会造成总线冲突？我现在想将共享存储器配置成L2，请问怎么配置？谢谢

您好,多个Master是可以同时访问同一个Slave的，但是这时总线会根据协议规定的方法来解决冲突访问。
您这里的共享存储器指的是什么？
在C6678上的L2分为私有L2和共享L2，共享的L2在MSMC中控制，地址范围为0x0c000000开始。

我指的共享存储器是MSMC SRAM，手册上说MSMC SRAM既可以配置成共享的L2存储器，也可以配置成共享的L3存储器。我想知道默认是配置成L2还是L3? 实际应用中是否将MSMC SRAM配置成共享的L2比较好？因为L3的数据读取会比L2慢。

还有另外一个问题也是关于存储器的。C6678的8个核是否可以同时去访问DDR3存储器，如果可以，是否也是总线根据协议规定来解决冲突！

C6678的MSMC负责处理系统中所有的master（包括8个核，以及SMS和SES接口）对MSMC SRAM和DDR3的访问请求。4M字节的MSMC SRAM有4个bank，这些bank是独立的slave，也就是说，如果两个master在同一个clock访问两个不同的bank，则两个访问可以同时完成。如果多个master在同一个clock访问同一个bank，则由MSMC内的仲裁逻辑按优先级处理。DDR3只有一个slave端口，如果多个master在同一个clock访问它，也由MSMC内的仲裁逻辑按优先级处理。

两个核对同一段共享存储进行操作，时间在1ms内，有先后顺序。实际是core1将数据存放到该地址空间，core0通过以太网程序将其发送出去。发送出来的数据为core0原先的数据，而非core1处理过的数据。听人说两个核公用公共资源，需要做刷cache的操作，比如cache_invidle，cache_writeback之类的。真的是这个原因吗？
如果是，做了以后是不是比较难满足1ms的时间要求(处理和发送一起在1ms内完成)？

需要做Cache维护，能不能完成测了才知道。

//----------------------------------------------------------------------------------------------------
						多核
//----------------------------------------------------------------------------------------------------
main()
{
	coreID = GetCoreID();//DSP's DNUM register
	switch(CoreID)
	{
		case core0:
		task_core0(...);
		break;
		case core1:
		task_core1(...);
		break;
		.
		.
		.
		default:
		break;
	}
}

//----------------------------------------------------------------------------------------------------
						
//----------------------------------------------------------------------------------------------------
MEMORY
{
	MSMC: o = 0c0000000h |=003fffffh
}
SECTOIONS
{
	.text > MSMC
}


系统定义
.cinit     存放程序中的变量初值和常量
.const   存放程序中的字符常量、浮点常量和用const声明的常量
.switch  存放程序中switch语句的跳转地址表
.text     存放程序代码
.bss      为程序中的全局和静态变量保留存储空间
.far       为程序中用far声明的全局和静态变量保留空间
.stack    为程序系统堆栈保留存储空间，用于保存返回地址、函数间的参数传递、存储局部变量和保存中间结果
.sysmem 用于程序中的malloc 、calloc 、和realoc 函数动态分配存储空间
“.args”段用于存储程序中的main(…)函数的“argc”、“argv”和“envp”参数值，该属性值一般保持默认值即可。
The .cio section is a buffer used by printf and related functions. You can typically afford slower performance of such I/O functions, so it is placed in off-chip memory.
关于xdc.meta确实不是很清楚。看还有谁能答复呢。













