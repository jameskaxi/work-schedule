
~~~~~~~~~~~~~~~~~~~~~~~~~工作区~~~~~~~~~~~~~~~~~~~~~~~~~~~

存放.git文件夹和我自己的文件的目录叫做工作区
.git是版本库，版本库里面有stage和master等等
stage是暂缓区，是临时存放add之后的地方
commit就是将stage(暂缓区)的文件提交到master(或者其他分支)上
指向master的一个指针叫做HEAD(master分支是Git自动创建的)
git status 查看状态信息
提交后，用 git diff HEAD ‐‐ xxx.txt 命令可以查看工作区和版本库里面[【最新版本】的区别
git checkout ‐‐ file 可以丢弃【工作区】的修改
git checkout ‐‐ file 命令中的 ‐‐ 很重要，没有 ‐‐ ，就变成了“创建一个新分支”的命令
命令 git reset HEAD xxx.txt 可以把暂存区的修改撤销掉（unstage），重新放回工作区

~~~~~~~~~~~~~~~~~~~~~~~~~版本~~~~~~~~~~~~~~~~~~~~~~~~~~~

在Git中，用 HEAD 表示当前版本，上一个版本就是 HEAD^ ，上上一个版本就是 HEAD^^ 当然往上100个版本写成 HEAD~100。
回退到上一个版本，就可以使用 git reset --hard HEAD^（ git reset ‐‐hard commit_id）命令。     ‐‐hard 参数有啥意义？
穿梭前，用 git log 可以查看提交历史，以便确定要回退到哪个版本
要重返未来，用 git reflog 查看命令历史，以便确定要回到未来的哪个版本。


~~~~~~~~~~~~~~~~~~~~~~~~~删除与还原~~~~~~~~~~~~~~~~~~~~~~~~~~~

在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件test.txt到Git并且提交
一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用 rm 命令删了
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了， git status 命令会立刻告诉你哪些文件被删除
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令 git rm 删掉，并且 git commit 
现在，文件就从版本库中被删除了
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本【git checkout -- test.txt】
git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”


~~~~~~~~~~~~~~~~~~~~~~~~~推送远程~~~~~~~~~~~~~~~~~~~~~~~~~~~

现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步
这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得	
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
目前，在GitHub上的这个 xxx 仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库
也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库
git remote add origin git@github.com:yojone/xxx.git
下一步，就可以把本地库的所有内容推送到远程库上
git push -u origin master 第一次推送master分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令 git push origin master 推送最新修改


~~~~~~~~~~~~~~~~~~~~~~~~~克隆~~~~~~~~~~~~~~~~~~~~~~~~~~~

上次我们讲了先有本地库，后有远程库的时候，如何关联远程库
现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。
首先，登陆GitHub，创建一个新的仓库，名字叫 gitskills ：
我们勾选 Initialize this repository with a README ，这样GitHub会自动为我们创建一个 README.md 文件
现在，远程库已经准备好了，下一步是用命令 git clone 克隆一个本地库
git clone git@github.com:yojone/gitskills.git


你也许还注意到，GitHub给出的地址不止一个，还可以用 https://github.com/michaelliao/gitskills.git 这样的地址。
实际上，Git支持多种协议，默认的 git:// 使用ssh，但也可以使用 https 等其他协议。
使用 https 除了速度慢以外，还有个最大的麻烦是每次推送都必须【输入口令】，但是在某些只开放http端口的公司内部就无
法使用 ssh 协议而只能用 https 。Git支持多种协议，包括 https ，但通过 ssh 支持的原生 git 协议速度最快


~~~~~~~~~~~~~~~~~~~~~~~~~分支~~~~~~~~~~~~~~~~~~~~~~~~~~

当我们创建新的分支，例如 dev 时，Git新建了一个指针叫 dev 指向 master 相同的提交，再把 【HEAD 指向 dev】就表示
当前分支在 dev 上
Git创建一个分支很快，因为除了增加一个 dev 指针，改改 HEAD 的指向，工作区的文件都没有任何变化！
不过，从现在开始，对工作区的修改和提交就是针对 dev 分支了，比如新提交一次后， dev 指针往前移动一步，
而 master 指针不变：
假如我们在 dev 上的工作完成了，就可以把 dev 合并到 master 上


~~~~~~~~~~~~~~~~~~~~~~~~~分支创建与合并~~~~~~~~~~~~~~~~~~~~~~~~~~~

git checkout -b dev  创建 dev 分支，加上 ‐b 参数表示创建并切换相当于以下两条命令
 git branch dev
 git checkout dev
然后，用 git branch 命令查看当前分支
git branch 命令会列出所有分支，当前分支前面会标一个 * 号
dev 分支的工作完成，我们就可以切换回 master 分支
git checkout master
切换回 master 分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在 dev 分支上，而 master
分支此刻的提交点并没有变：
现在，我们把 dev 分支的工作成果合并到 master 分支上
 git merge dev  用于合并指定分支到当前分支  注意到上面的 Fast‐forward 信息，Git告诉我们，这次合并是“快进模式”
合并完成后，就可以放心地删除 dev 分支了 git branch -d dev

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
 git log ‐‐graph 命令可以看到分支合并图

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先， master 分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在 dev 分支上，也就是说， dev 分支是不稳定的，到某个时候，比如1.0版本发布时，再把 dev 分
支合并到 master 上，在 master 分支发布1.0版本；
你和你的小伙伴们每个人都在 dev 分支上干活，每个人都有自己的分支，时不时地往 dev 分支上合并就可以了

合并分支时，加上 ‐‐no‐ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而 fast forward 合并就看不出来曾经做过合并。


37/57
37/57
37/57
37/57
37/57



------------------------------------关于可能出现的错误----------------------------------
1.在执行
$ git remote addorigin git@github.com:defnngj/hello-world.git
错误提示：fatal: remote origin already exists.
解决办法：
$ git remote rm origin
然后在执行：$ git remote add origin git@github.com:defnngj/hello-world.git 就不会报错误了
2. 在执行
$ git push origin master
错误提示：error:failed to push som refs to.......
解决办法：
$ git pull origin master // 先把远程服务器github上面的文件拉下来，再push 上去。
---------------------------后记-----------------------------------------------------------------------




