原来以为操作我一直弄反了。需要移位的数字<<移位的次数
如3<<2，则是将数字3左移2位。先把3转换为二进制0x00000000011，然后移位成0x000000001100

//-------------------------------------------------------------------
								多核的地址
//-------------------------------------------------------------------

10800000 1087FFFF 512K CorePac0 L2 SRAM------------
10E00000 10E07FFF 32K  CorePac0 L1P SRAM
10F00000 10F07FFF 32K  CorePac0 L1D SRAM

11800000 1187FFFF 512K CorePac1 L2 SRAM------------
11E00000 10E07FFF 32K  CorePac0 L1P SRAM
11F00000 10F07FFF 32K  CorePac0 L1D SRAM


//----------------------------------------------------------------
								镜像工具链过程
//----------------------------------------------------------------
首先是多个.out文件用hex6x转换成包含程序入口地址及段信息的.btbl文件
然后将多个btbl文件用mergebtbl工具合并成一个btbl文件
再用AddDdrTable工具加入对DDR的配置，得到有DDR配置信息的.btbl文件
然而在烧写的时候是分成很多小段进行烧写的，所以为了保证数据的正确性，用b2i2c_ex工具来分割，得到.i2c文件
接着用b2ccs工具将i2c文件转换成CCS能识别的文件
最后用qfparse加入Boot参数表，用modify工具转换成小端模式。



//----------------------------------------------------------------
							前人BOOT经验
//----------------------------------------------------------------
1. 有一个疑问：
做boot table之前，我肯定已经写好工程代码了，得到.out再去做boot table的。然后再从boot table中获得了c_int00地址，再返回去修改boot部分的IPC唤醒其它核代码？这样是不是不合理。
2. 我的工程中.text是放在MSMCSRAM中的，4个Core共享这.text，则4个Core的c_int00物理地址应该是一样的吧？
3. 正常的C66x做多核SPI Boot的流程就是：先编写代码（没有IPC唤醒多核代码）--->写完后功能验证OK，则通过memory view观察各个Core的c_int00物理地址--->再在原工程中添加IPC唤醒多核代码--->再生成.out--->再做boot table--->实现Boot？
是这样的流程吗？还是有别的流程？
感觉对于Boot这种保证产品中代码运行的基本操作，TI应该要给出一套规范操作或者更方便一些的工具吧？

1, 一般做boot时，代码基本就基本固定了
2, 不一定；
3, 对，boot的代码只需要存在于core 0


//----------------------------------------------------------------
								
//----------------------------------------------------------------



